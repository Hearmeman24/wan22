# .github/workflows/vultr-build.yml
name: Build on Vultr

on:
  push:
    tags:
      - 'v*'  # e.g., v1.0.0

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      # Authentication for vultr-cli per official docs
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      # Harbor registry configuration
      HARBOR_PROJECT_NAME: ${{ secrets.HARBOR_PROJECT_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          echo "Validating required configuration..."
          if [ -z "${{ env.HARBOR_PROJECT_NAME }}" ]; then
            echo "ERROR: HARBOR_PROJECT_NAME secret is not set"
            echo "Please set this secret to your Harbor project/repository name (e.g., 'comfyui-image-bot')"
            exit 1
          fi
          
          # Validate lowercase format for Docker compatibility
          if ! echo "${{ env.HARBOR_PROJECT_NAME }}" | grep -E '^[a-z0-9][a-z0-9._-]*$' > /dev/null; then
            echo "ERROR: HARBOR_PROJECT_NAME must be lowercase and contain only letters, numbers, dots, underscores, and hyphens"
            echo "Current value: '${{ env.HARBOR_PROJECT_NAME }}'"
            exit 1
          fi
          
          echo "✓ HARBOR_PROJECT_NAME: ${{ env.HARBOR_PROJECT_NAME }}"
          echo "✓ Docker image will be: registry.hearmemanai.xyz/${{ env.HARBOR_PROJECT_NAME }}/${{ env.HARBOR_PROJECT_NAME }}:TAG"

      - name: Extract tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl tar openssh-client

      - name: Install Vultr CLI
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/vultr/vultr-cli/releases/latest | jq -r '.tag_name')  # e.g. v3.6.0
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')   # linux/darwin
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH=amd64 ;;
            aarch64) ARCH=arm64 ;;
          esac
          
          # Fix the OS naming convention for vultr-cli downloads
          if [ "$OS" = "darwin" ]; then
            OS="macOs"
          fi
          
          URL="https://github.com/vultr/vultr-cli/releases/download/${LATEST_VERSION}/vultr-cli_${LATEST_VERSION}_${OS}_${ARCH}.tar.gz"
          echo "Downloading $URL"
          curl -L "$URL" -o /tmp/vultr-cli.tgz
          tar -xzf /tmp/vultr-cli.tgz -C /tmp
          BIN=$(find /tmp -maxdepth 1 -type f -name 'vultr-cli*' | head -n1)
          sudo mv "$BIN" /usr/local/bin/vultr-cli
          sudo chmod +x /usr/local/bin/vultr-cli
          vultr-cli version

      - name: Generate ephemeral SSH keypair
        id: ssh_key
        run: |
          ssh-keygen -t ed25519 -N "" -f id_ed25519
          chmod 600 id_ed25519
          echo "ssh_pub=$(cat id_ed25519.pub)" >> $GITHUB_OUTPUT

      - name: Register SSH public key in Vultr
        id: add_ssh
        run: |
          KEY_NAME="gha-${{ steps.extract_tag.outputs.tag }}-$(date +%s)"
          echo "Creating SSH key with name: $KEY_NAME"
          
          SSH_KEY_JSON=$(vultr-cli ssh-key create --name "$KEY_NAME" --key "${{ steps.ssh_key.outputs.ssh_pub }}" -o json)
          echo "SSH key creation response:"
          echo "$SSH_KEY_JSON"
          
          # Try multiple possible response formats for SSH key ID
          KEY_ID=$(echo "$SSH_KEY_JSON" | jq -r '.ssh_key.id // .id // .ssh_keys[0].id // empty')
          
          if [ -z "$KEY_ID" ] || [ "$KEY_ID" = "null" ]; then
            echo "ERROR: Failed to create SSH key or extract key ID"
            echo "Full response: $SSH_KEY_JSON"
            exit 1
          fi
          
          echo "Created SSH key with ID: $KEY_ID"
          echo "ssh_key_id=$KEY_ID" >> $GITHUB_OUTPUT

      - name: Create cloud-init user-data
        run: |
          cat > startup-userdata.sh << 'EOF'
          #!/bin/bash
          set -euxo pipefail
          apt-get update && apt-get upgrade -y
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          apt-get install -y git
          touch /tmp/setup-complete
          EOF

      - name: Create Vultr instance (Ubuntu 22.04, dynamic OS lookup)
        id: create_instance
        run: |
          # Discover Ubuntu 22.04 x64 OS ID dynamically
          echo "Fetching OS catalog..."
          vultr-cli os list -o json > /tmp/os_catalog.json
          echo "OS catalog response:"
          cat /tmp/os_catalog.json | jq .
          
          OS_ID=$(cat /tmp/os_catalog.json \
            | jq -r '.os[] | select((.name | test("Ubuntu 22\\.04"; "i")) and (.arch == "x64")) | .id' \
            | head -n1)

          if [ -z "$OS_ID" ]; then
            echo "Could not find Ubuntu 22.04 x64 in OS catalog. Available Ubuntu options:"
            cat /tmp/os_catalog.json | jq -r '.os[] | select(.name | test("Ubuntu"; "i")) | "\(.id): \(.name) (\(.arch))"'
            exit 1
          fi
          echo "Using OS_ID=$OS_ID (Ubuntu 22.04 x64)"

          # Ensure plan exists (adjust if needed)
          PLAN_ID="voc-g-8c-32gb-160s-amd"
          if ! vultr-cli plans list -o json | jq -e --arg p "$PLAN_ID" '.plans[] | select(.id == $p)' > /dev/null; then
            echo "Plan $PLAN_ID not found. Available plans:"
            vultr-cli plans list -o json | jq -r '.plans[] | "\(.id): \(.vcpu_count)vCPU, \(.ram)MB RAM, \(.disk)GB disk - $\(.monthly_cost)/month"' | head -10
            exit 1
          fi

          USERDATA=$(< ./startup-userdata.sh)
          SSH_KEY_ID="${{ steps.add_ssh.outputs.ssh_key_id }}"
          
          echo "Instance creation parameters:"
          echo "  Region: fra"
          echo "  Plan: $PLAN_ID"
          echo "  OS: $OS_ID"
          echo "  SSH Key ID: $SSH_KEY_ID"
          echo "  Label: build-${{ steps.extract_tag.outputs.tag }}"
          
          # Validate SSH key ID format (should be UUID, case-insensitive)
          if ! echo "$SSH_KEY_ID" | grep -iE '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' > /dev/null; then
            echo "ERROR: SSH key ID '$SSH_KEY_ID' is not a valid UUID format"
            echo "Expected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            exit 1
          fi

          INSTANCE_JSON=$(vultr-cli instance create \
            --region fra \
            --plan "$PLAN_ID" \
            --os "$OS_ID" \
            --ssh-keys "$SSH_KEY_ID" \
            --label "build-${{ steps.extract_tag.outputs.tag }}" \
            --userdata "$USERDATA" \
            -o json)

          echo "Instance creation response:"
          echo "$INSTANCE_JSON"
          
          # Try multiple possible response formats for instance ID
          INSTANCE_ID=$(echo "$INSTANCE_JSON" | jq -r '.instance.id // .id // empty')
          
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "null" ]; then
            echo "ERROR: Failed to extract instance ID from response"
            echo "Full response: $INSTANCE_JSON"
            exit 1
          fi
          
          # Validate instance ID format (should be UUID)
          if ! echo "$INSTANCE_ID" | grep -iE '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' > /dev/null; then
            echo "ERROR: Instance ID '$INSTANCE_ID' is not a valid UUID format"
            echo "Expected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            exit 1
          fi
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Created instance: $INSTANCE_ID"

      - name: Wait for instance to be ready & fetch IP
        id: wait_instance
        timeout-minutes: 15
        run: |
          INSTANCE_ID=${{ steps.create_instance.outputs.instance_id }}
          echo "Waiting for instance ID: $INSTANCE_ID"
          
          # Validate instance ID format before using it
          if ! echo "$INSTANCE_ID" | grep -iE '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' > /dev/null; then
            echo "ERROR: Instance ID '$INSTANCE_ID' is not a valid UUID format"
            exit 1
          fi

          # Wait until instance is active
          RETRY_COUNT=0
          MAX_RETRIES=90  # 15 minutes with 10 second intervals
          until [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; do
            echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Checking instance status..."
            
            INSTANCE_STATUS_JSON=$(vultr-cli instance get "$INSTANCE_ID" -o json 2>&1)
            INSTANCE_GET_EXIT_CODE=$?
            
            if [ $INSTANCE_GET_EXIT_CODE -ne 0 ]; then
              echo "Error getting instance (exit code $INSTANCE_GET_EXIT_CODE):"
              echo "$INSTANCE_STATUS_JSON"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 10
              continue
            fi
            
            echo "Instance status response:"
            echo "$INSTANCE_STATUS_JSON"
            
            # Try multiple possible response formats for status
            STATUS=$(echo "$INSTANCE_STATUS_JSON" | jq -r '.instance.status // .status // empty')
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "active" ]; then
              echo "Instance is now active!"
              break
            fi
            
            echo "Instance not yet active, waiting..."
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 10
          done

          if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; then
            echo "ERROR: Instance did not become active within timeout period"
            exit 1
          fi

          # Get IP address with the same response format handling
          IP_ADDRESS=$(echo "$INSTANCE_STATUS_JSON" | jq -r '.instance.main_ip // .main_ip // empty')
          
          if [ -z "$IP_ADDRESS" ] || [ "$IP_ADDRESS" = "null" ]; then
            echo "ERROR: Failed to extract IP address from instance"
            echo "Full response: $INSTANCE_STATUS_JSON"
            exit 1
          fi
          
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "Instance IP: $IP_ADDRESS"

          # Wait for cloud-init completion marker
          for i in $(seq 1 60); do
            if ssh -i id_ed25519 -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@"$IP_ADDRESS" "test -f /tmp/setup-complete" 2>/dev/null; then
              echo "Startup script completed!"
              exit 0
            fi
            echo "[$i/60] setup not complete yet..."
            sleep 10
          done

          echo "Setup did not complete in time" >&2
          exit 1

      - name: Build and push Docker image on the instance (tag only)
        run: |
          IP=${{ steps.wait_instance.outputs.ip_address }}

          cat > build-script.sh << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail

          git clone https://github.com/${{ github.repository }}.git /tmp/repo
          cd /tmp/repo
          git checkout ${{ steps.extract_tag.outputs.tag }}

          echo "$REGISTRY_PASSWORD" | docker login registry.hearmemanai.xyz -u "$REGISTRY_USERNAME" --password-stdin

          docker build \
            --build-arg CIVITAI_TOKEN="$CIVITAI_TOKEN" \
            -t registry.hearmemanai.xyz/"$HARBOR_PROJECT_NAME"/"$HARBOR_PROJECT_NAME":${{ steps.extract_tag.outputs.tag }} .

          docker push registry.hearmemanai.xyz/"$HARBOR_PROJECT_NAME"/"$HARBOR_PROJECT_NAME":${{ steps.extract_tag.outputs.tag }}
          EOF

          scp -i id_ed25519 -o StrictHostKeyChecking=no build-script.sh root@"$IP":/tmp/
          ssh -i id_ed25519 -o StrictHostKeyChecking=no root@"$IP" \
            "REGISTRY_USERNAME='${{ secrets.REGISTRY_USERNAME }}' REGISTRY_PASSWORD='${{ secrets.REGISTRY_PASSWORD }}' CIVITAI_TOKEN='${{ secrets.CIVITAI_TOKEN }}' HARBOR_PROJECT_NAME='${{ env.HARBOR_PROJECT_NAME }}' bash /tmp/build-script.sh"

      - name: Cleanup - Delete Vultr instance and SSH key
        if: always()
        run: |
          if [ -n "${{ steps.create_instance.outputs.instance_id }}" ]; then
            echo "Deleting instance ${{ steps.create_instance.outputs.instance_id }}"
            vultr-cli instance delete ${{ steps.create_instance.outputs.instance_id }} --force || true
          fi
          if [ -n "${{ steps.add_ssh.outputs.ssh_key_id }}" ]; then
            echo "Deleting SSH key ${{ steps.add_ssh.outputs.ssh_key_id }}"
            vultr-cli ssh-key delete ${{ steps.add_ssh.outputs.ssh_key_id }} || true
          fi
